// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldDatabase.Data;

#nullable disable

namespace WorldDatabase.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorldDatabase.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("State_id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WorldDatabase.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency_symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmojiU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iso3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Native")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numeric_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subregion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tld")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WorldDatabase.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Country_id")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State_code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Country_id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("WorldDatabase.Models.Timezone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("GmtOffset")
                        .HasColumnType("int");

                    b.Property<string>("GmtOffsetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TzName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoneName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Timezones");
                });

            modelBuilder.Entity("WorldDatabase.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("De")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Es")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("It")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PtBR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("WorldDatabase.Models.City", b =>
                {
                    b.HasOne("WorldDatabase.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("State_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("WorldDatabase.Models.State", b =>
                {
                    b.HasOne("WorldDatabase.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("Country_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WorldDatabase.Models.Timezone", b =>
                {
                    b.HasOne("WorldDatabase.Models.Country", "Country")
                        .WithMany("Timezones")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WorldDatabase.Models.Translation", b =>
                {
                    b.HasOne("WorldDatabase.Models.Country", "Country")
                        .WithOne("Translations")
                        .HasForeignKey("WorldDatabase.Models.Translation", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WorldDatabase.Models.Country", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Timezones");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("WorldDatabase.Models.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
